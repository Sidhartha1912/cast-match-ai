
import jspdf from 'jspdf';
import { MatchedCandidate } from './groqCloudService';

export const generateReport = (
  characterData: any,
  characterImage: string,
  candidates: MatchedCandidate[]
): Promise<Blob> => {
  return new Promise((resolve) => {
    // Create PDF document
    const pdf = new jspdf();
    
    // Add title and header
    pdf.setFontSize(22);
    pdf.text('CastMatch.AI Report', 105, 20, { align: 'center' });
    const today = new Date().toLocaleDateString();
    pdf.setFontSize(12);
    pdf.text(`Generated on: ${today}`, 105, 30, { align: 'center' });
    
    // Add character info
    pdf.setFontSize(16);
    pdf.text('Character Profile', 20, 45);
    
    pdf.setFontSize(12);
    const characterDetails = [
      `Gender: ${characterData.gender || 'Not specified'}`,
      `Age Range: ${characterData.ageRange || 'Not specified'}`,
      `Ethnicity: ${characterData.ethnicity || 'Not specified'}`
    ];
    
    let yPosition = 55;
    characterDetails.forEach(detail => {
      pdf.text(detail, 20, yPosition);
      yPosition += 10;
    });
    
    // Character description
    if (characterData.description) {
      pdf.text('Character Description:', 20, yPosition);
      yPosition += 10;
      
      // Split long text into multiple lines
      const textLines = pdf.splitTextToSize(characterData.description, 170);
      pdf.text(textLines, 20, yPosition);
      yPosition += textLines.length * 7 + 10; // Add space after description
    }
    
    // Add top matching candidates section
    pdf.setFontSize(16);
    pdf.text('Top Matching Candidates', 20, yPosition);
    yPosition += 15;
    
    // Sort candidates by match score
    const sortedCandidates = [...candidates].sort((a, b) => b.matchScore - a.matchScore);
    
    sortedCandidates.forEach((candidate, index) => {
      pdf.setFontSize(14);
      pdf.text(`${index + 1}. ${candidate.name} - Match Score: ${candidate.matchScore}%`, 20, yPosition);
      yPosition += 10;
      
      pdf.setFontSize(12);
      pdf.text('Matching Traits:', 25, yPosition);
      yPosition += 7;
      
      // Add matching traits
      candidate.matchingTraits.forEach(trait => {
        pdf.text(`â€¢ ${trait}`, 30, yPosition);
        yPosition += 7;
      });
      
      yPosition += 5; // Add space between candidates
    });
    
    // Add footer
    pdf.setFontSize(10);
    pdf.text('Generated by CastMatch.AI - Find your perfect cast', 105, 280, { align: 'center' });
    
    // Return the PDF blob
    const pdfBlob = pdf.output('blob');
    resolve(pdfBlob);
  });
};
